// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qmessages.proto

#ifndef PROTOBUF_qmessages_2eproto__INCLUDED
#define PROTOBUF_qmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_qmessages_2eproto();
void protobuf_AssignDesc_qmessages_2eproto();
void protobuf_ShutdownFile_qmessages_2eproto();

class qmessage;
class tlv;
class body;

enum qmessage_RequestType {
  qmessage_RequestType_CREATE = 0,
  qmessage_RequestType_DESTROY = 1,
  qmessage_RequestType_EXIT = 3,
  qmessage_RequestType_INVALID = 4
};
bool qmessage_RequestType_IsValid(int value);
const qmessage_RequestType qmessage_RequestType_RequestType_MIN = qmessage_RequestType_CREATE;
const qmessage_RequestType qmessage_RequestType_RequestType_MAX = qmessage_RequestType_INVALID;
const int qmessage_RequestType_RequestType_ARRAYSIZE = qmessage_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* qmessage_RequestType_descriptor();
inline const ::std::string& qmessage_RequestType_Name(qmessage_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    qmessage_RequestType_descriptor(), value);
}
inline bool qmessage_RequestType_Parse(
    const ::std::string& name, qmessage_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<qmessage_RequestType>(
    qmessage_RequestType_descriptor(), name, value);
}
enum tlv_type {
  tlv_type_data = 0,
  tlv_type_stream = 1
};
bool tlv_type_IsValid(int value);
const tlv_type tlv_type_type_MIN = tlv_type_data;
const tlv_type tlv_type_type_MAX = tlv_type_stream;
const int tlv_type_type_ARRAYSIZE = tlv_type_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* tlv_type_descriptor();
inline const ::std::string& tlv_type_Name(tlv_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    tlv_type_descriptor(), value);
}
inline bool tlv_type_Parse(
    const ::std::string& name, tlv_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tlv_type>(
    tlv_type_descriptor(), name, value);
}
// ===================================================================

class qmessage : public ::google::protobuf::Message {
 public:
  qmessage();
  virtual ~qmessage();

  qmessage(const qmessage& from);

  inline qmessage& operator=(const qmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qmessage& default_instance();

  void Swap(qmessage* other);

  // implements Message ----------------------------------------------

  qmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qmessage& from);
  void MergeFrom(const qmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef qmessage_RequestType RequestType;
  static const RequestType CREATE = qmessage_RequestType_CREATE;
  static const RequestType DESTROY = qmessage_RequestType_DESTROY;
  static const RequestType EXIT = qmessage_RequestType_EXIT;
  static const RequestType INVALID = qmessage_RequestType_INVALID;
  static inline bool RequestType_IsValid(int value) {
    return qmessage_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    qmessage_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    qmessage_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    qmessage_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return qmessage_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return qmessage_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return qmessage_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .qmessage.RequestType req = 1;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 1;
  inline ::qmessage_RequestType req() const;
  inline void set_req(::qmessage_RequestType value);

  // optional uint64 thread_main = 2;
  inline bool has_thread_main() const;
  inline void clear_thread_main();
  static const int kThreadMainFieldNumber = 2;
  inline ::google::protobuf::uint64 thread_main() const;
  inline void set_thread_main(::google::protobuf::uint64 value);

  // optional uint64 thread_args = 3;
  inline bool has_thread_args() const;
  inline void clear_thread_args();
  static const int kThreadArgsFieldNumber = 3;
  inline ::google::protobuf::uint64 thread_args() const;
  inline void set_thread_args(::google::protobuf::uint64 value);

  // optional uint64 tid = 4;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 4;
  inline ::google::protobuf::uint64 tid() const;
  inline void set_tid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:qmessage)
 private:
  inline void set_has_req();
  inline void clear_has_req();
  inline void set_has_thread_main();
  inline void clear_has_thread_main();
  inline void set_has_thread_args();
  inline void clear_has_thread_args();
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 thread_main_;
  ::google::protobuf::uint64 thread_args_;
  ::google::protobuf::uint64 tid_;
  int req_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_qmessages_2eproto();
  friend void protobuf_AssignDesc_qmessages_2eproto();
  friend void protobuf_ShutdownFile_qmessages_2eproto();

  void InitAsDefaultInstance();
  static qmessage* default_instance_;
};
// -------------------------------------------------------------------

class tlv : public ::google::protobuf::Message {
 public:
  tlv();
  virtual ~tlv();

  tlv(const tlv& from);

  inline tlv& operator=(const tlv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tlv& default_instance();

  void Swap(tlv* other);

  // implements Message ----------------------------------------------

  tlv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tlv& from);
  void MergeFrom(const tlv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef tlv_type type;
  static const type data = tlv_type_data;
  static const type stream = tlv_type_stream;
  static inline bool type_IsValid(int value) {
    return tlv_type_IsValid(value);
  }
  static const type type_MIN =
    tlv_type_type_MIN;
  static const type type_MAX =
    tlv_type_type_MAX;
  static const int type_ARRAYSIZE =
    tlv_type_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_descriptor() {
    return tlv_type_descriptor();
  }
  static inline const ::std::string& type_Name(type value) {
    return tlv_type_Name(value);
  }
  static inline bool type_Parse(const ::std::string& name,
      type* value) {
    return tlv_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .tlv.type Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::tlv_type type() const;
  inline void set_type(::tlv_type value);

  // required uint32 Length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tlv)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_qmessages_2eproto();
  friend void protobuf_AssignDesc_qmessages_2eproto();
  friend void protobuf_ShutdownFile_qmessages_2eproto();

  void InitAsDefaultInstance();
  static tlv* default_instance_;
};
// -------------------------------------------------------------------

class body : public ::google::protobuf::Message {
 public:
  body();
  virtual ~body();

  body(const body& from);

  inline body& operator=(const body& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const body& default_instance();

  void Swap(body* other);

  // implements Message ----------------------------------------------

  body* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const body& from);
  void MergeFrom(const body& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:body)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_qmessages_2eproto();
  friend void protobuf_AssignDesc_qmessages_2eproto();
  friend void protobuf_ShutdownFile_qmessages_2eproto();

  void InitAsDefaultInstance();
  static body* default_instance_;
};
// ===================================================================


// ===================================================================

// qmessage

// required .qmessage.RequestType req = 1;
inline bool qmessage::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qmessage::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qmessage::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qmessage::clear_req() {
  req_ = 0;
  clear_has_req();
}
inline ::qmessage_RequestType qmessage::req() const {
  return static_cast< ::qmessage_RequestType >(req_);
}
inline void qmessage::set_req(::qmessage_RequestType value) {
  assert(::qmessage_RequestType_IsValid(value));
  set_has_req();
  req_ = value;
}

// optional uint64 thread_main = 2;
inline bool qmessage::has_thread_main() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qmessage::set_has_thread_main() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qmessage::clear_has_thread_main() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qmessage::clear_thread_main() {
  thread_main_ = GOOGLE_ULONGLONG(0);
  clear_has_thread_main();
}
inline ::google::protobuf::uint64 qmessage::thread_main() const {
  return thread_main_;
}
inline void qmessage::set_thread_main(::google::protobuf::uint64 value) {
  set_has_thread_main();
  thread_main_ = value;
}

// optional uint64 thread_args = 3;
inline bool qmessage::has_thread_args() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qmessage::set_has_thread_args() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qmessage::clear_has_thread_args() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qmessage::clear_thread_args() {
  thread_args_ = GOOGLE_ULONGLONG(0);
  clear_has_thread_args();
}
inline ::google::protobuf::uint64 qmessage::thread_args() const {
  return thread_args_;
}
inline void qmessage::set_thread_args(::google::protobuf::uint64 value) {
  set_has_thread_args();
  thread_args_ = value;
}

// optional uint64 tid = 4;
inline bool qmessage::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void qmessage::set_has_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void qmessage::clear_has_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void qmessage::clear_tid() {
  tid_ = GOOGLE_ULONGLONG(0);
  clear_has_tid();
}
inline ::google::protobuf::uint64 qmessage::tid() const {
  return tid_;
}
inline void qmessage::set_tid(::google::protobuf::uint64 value) {
  set_has_tid();
  tid_ = value;
}

// -------------------------------------------------------------------

// tlv

// required .tlv.type Type = 1;
inline bool tlv::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tlv::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tlv::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tlv::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::tlv_type tlv::type() const {
  return static_cast< ::tlv_type >(type_);
}
inline void tlv::set_type(::tlv_type value) {
  assert(::tlv_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 Length = 2;
inline bool tlv::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tlv::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tlv::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tlv::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 tlv::length() const {
  return length_;
}
inline void tlv::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// body

// required bytes Data = 1;
inline bool body::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void body::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void body::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void body::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& body::data() const {
  return *data_;
}
inline void body::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void body::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void body::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* body::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* body::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void body::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qmessage_RequestType>() {
  return ::qmessage_RequestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tlv_type>() {
  return ::tlv_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qmessages_2eproto__INCLUDED
