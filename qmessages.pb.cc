// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* qmessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qmessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* qmessage_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* tlv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tlv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tlv_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  body_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_qmessages_2eproto() {
  protobuf_AddDesc_qmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "qmessages.proto");
  GOOGLE_CHECK(file != NULL);
  qmessage_descriptor_ = file->message_type(0);
  static const int qmessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qmessage, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qmessage, thread_main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qmessage, thread_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qmessage, tid_),
  };
  qmessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qmessage_descriptor_,
      qmessage::default_instance_,
      qmessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qmessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qmessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qmessage));
  qmessage_RequestType_descriptor_ = qmessage_descriptor_->enum_type(0);
  tlv_descriptor_ = file->message_type(1);
  static const int tlv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tlv, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tlv, length_),
  };
  tlv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tlv_descriptor_,
      tlv::default_instance_,
      tlv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tlv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tlv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tlv));
  tlv_type_descriptor_ = tlv_descriptor_->enum_type(0);
  body_descriptor_ = file->message_type(2);
  static const int body_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body, data_),
  };
  body_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      body_descriptor_,
      body::default_instance_,
      body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(body));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_qmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qmessage_descriptor_, &qmessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tlv_descriptor_, &tlv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    body_descriptor_, &body::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_qmessages_2eproto() {
  delete qmessage::default_instance_;
  delete qmessage_reflection_;
  delete tlv::default_instance_;
  delete tlv_reflection_;
  delete body::default_instance_;
  delete body_reflection_;
}

void protobuf_AddDesc_qmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017qmessages.proto\"\244\001\n\010qmessage\022\"\n\003req\030\001 "
    "\002(\0162\025.qmessage.RequestType\022\023\n\013thread_mai"
    "n\030\002 \001(\004\022\023\n\013thread_args\030\003 \001(\004\022\013\n\003tid\030\004 \001("
    "\004\"=\n\013RequestType\022\n\n\006CREATE\020\000\022\013\n\007DESTROY\020"
    "\001\022\010\n\004EXIT\020\003\022\013\n\007INVALID\020\004\"L\n\003tlv\022\027\n\004Type\030"
    "\001 \002(\0162\t.tlv.type\022\016\n\006Length\030\002 \002(\r\"\034\n\004type"
    "\022\010\n\004data\020\000\022\n\n\006stream\020\001\"\024\n\004body\022\014\n\004Data\030\001"
    " \002(\014", 284);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qmessages.proto", &protobuf_RegisterTypes);
  qmessage::default_instance_ = new qmessage();
  tlv::default_instance_ = new tlv();
  body::default_instance_ = new body();
  qmessage::default_instance_->InitAsDefaultInstance();
  tlv::default_instance_->InitAsDefaultInstance();
  body::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_qmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_qmessages_2eproto {
  StaticDescriptorInitializer_qmessages_2eproto() {
    protobuf_AddDesc_qmessages_2eproto();
  }
} static_descriptor_initializer_qmessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* qmessage_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qmessage_RequestType_descriptor_;
}
bool qmessage_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const qmessage_RequestType qmessage::CREATE;
const qmessage_RequestType qmessage::DESTROY;
const qmessage_RequestType qmessage::EXIT;
const qmessage_RequestType qmessage::INVALID;
const qmessage_RequestType qmessage::RequestType_MIN;
const qmessage_RequestType qmessage::RequestType_MAX;
const int qmessage::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int qmessage::kReqFieldNumber;
const int qmessage::kThreadMainFieldNumber;
const int qmessage::kThreadArgsFieldNumber;
const int qmessage::kTidFieldNumber;
#endif  // !_MSC_VER

qmessage::qmessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qmessage::InitAsDefaultInstance() {
}

qmessage::qmessage(const qmessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qmessage::SharedCtor() {
  _cached_size_ = 0;
  req_ = 0;
  thread_main_ = GOOGLE_ULONGLONG(0);
  thread_args_ = GOOGLE_ULONGLONG(0);
  tid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qmessage::~qmessage() {
  SharedDtor();
}

void qmessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qmessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qmessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qmessage_descriptor_;
}

const qmessage& qmessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qmessages_2eproto();
  return *default_instance_;
}

qmessage* qmessage::default_instance_ = NULL;

qmessage* qmessage::New() const {
  return new qmessage;
}

void qmessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_ = 0;
    thread_main_ = GOOGLE_ULONGLONG(0);
    thread_args_ = GOOGLE_ULONGLONG(0);
    tid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qmessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qmessage.RequestType req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qmessage_RequestType_IsValid(value)) {
            set_req(static_cast< ::qmessage_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_main;
        break;
      }

      // optional uint64 thread_main = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_main:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_main_)));
          set_has_thread_main();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_thread_args;
        break;
      }

      // optional uint64 thread_args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_args_)));
          set_has_thread_args();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tid;
        break;
      }

      // optional uint64 tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qmessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .qmessage.RequestType req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->req(), output);
  }

  // optional uint64 thread_main = 2;
  if (has_thread_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->thread_main(), output);
  }

  // optional uint64 thread_args = 3;
  if (has_thread_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->thread_args(), output);
  }

  // optional uint64 tid = 4;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qmessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .qmessage.RequestType req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->req(), target);
  }

  // optional uint64 thread_main = 2;
  if (has_thread_main()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->thread_main(), target);
  }

  // optional uint64 thread_args = 3;
  if (has_thread_args()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->thread_args(), target);
  }

  // optional uint64 tid = 4;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qmessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qmessage.RequestType req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->req());
    }

    // optional uint64 thread_main = 2;
    if (has_thread_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_main());
    }

    // optional uint64 thread_args = 3;
    if (has_thread_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->thread_args());
    }

    // optional uint64 tid = 4;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qmessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qmessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qmessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qmessage::MergeFrom(const qmessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      set_req(from.req());
    }
    if (from.has_thread_main()) {
      set_thread_main(from.thread_main());
    }
    if (from.has_thread_args()) {
      set_thread_args(from.thread_args());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qmessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qmessage::CopyFrom(const qmessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qmessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qmessage::Swap(qmessage* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(thread_main_, other->thread_main_);
    std::swap(thread_args_, other->thread_args_);
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qmessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qmessage_descriptor_;
  metadata.reflection = qmessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* tlv_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tlv_type_descriptor_;
}
bool tlv_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const tlv_type tlv::data;
const tlv_type tlv::stream;
const tlv_type tlv::type_MIN;
const tlv_type tlv::type_MAX;
const int tlv::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int tlv::kTypeFieldNumber;
const int tlv::kLengthFieldNumber;
#endif  // !_MSC_VER

tlv::tlv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tlv::InitAsDefaultInstance() {
}

tlv::tlv(const tlv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tlv::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tlv::~tlv() {
  SharedDtor();
}

void tlv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tlv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tlv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tlv_descriptor_;
}

const tlv& tlv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qmessages_2eproto();
  return *default_instance_;
}

tlv* tlv::default_instance_ = NULL;

tlv* tlv::New() const {
  return new tlv;
}

void tlv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tlv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tlv.type Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tlv_type_IsValid(value)) {
            set_type(static_cast< ::tlv_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Length;
        break;
      }

      // required uint32 Length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tlv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tlv.type Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 Length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tlv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tlv.type Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 Length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tlv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tlv.type Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 Length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tlv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tlv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tlv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tlv::MergeFrom(const tlv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tlv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tlv::CopyFrom(const tlv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tlv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tlv::Swap(tlv* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tlv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tlv_descriptor_;
  metadata.reflection = tlv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int body::kDataFieldNumber;
#endif  // !_MSC_VER

body::body()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void body::InitAsDefaultInstance() {
}

body::body(const body& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void body::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

body::~body() {
  SharedDtor();
}

void body::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return body_descriptor_;
}

const body& body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qmessages_2eproto();
  return *default_instance_;
}

body* body::default_instance_ = NULL;

body* body::New() const {
  return new body;
}

void body::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes Data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes Data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int body::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void body::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const body* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const body*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void body::MergeFrom(const body& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void body::CopyFrom(const body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool body::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void body::Swap(body* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = body_descriptor_;
  metadata.reflection = body_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
